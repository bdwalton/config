#+title: bdwalton's Emacs Config

* Preamble

The standard preamble below is used for init.el and early-init.el.

#+name: shared_preamble
#+begin_src emacs-lisp
  ;; This is bdwalton's emacs config. It is auto-generated from init.org.
  ;; Local changes will be overwritten.
#+end_src

This overrides the tangle output to go to early-init.el but references
the block above so they're always the same.

#+begin_src emacs-lisp :noweb yes :tangle ./early-init.el
  <<shared_preamble>>
#+end_src

This overrides the tangle output to go to custom.el but references
the block above so they're always the same.

#+begin_src emacs-lisp :noweb yes :tangle ./custom.el
  <<shared_preamble>>
#+end_src

* Early Init
This config gets spit out to early-init.el. It should be minimal.

#+begin_src emacs-lisp :tangle ./early-init.el
  ;; Ensure that package isn't initialized before we get to straight.el
  (setq package-enable-at-startup nil)
#+end_src
* Straight Package Management Initialization
We use straight.el for our package management as it facilitates both
standard package repo usage and github package usage with features
above and beyond the standard use-package. Below in the packages
block, we set it up such that it's cleanly integrated with
use-package.

#+begin_src emacs-lisp
;; Wire up straight.el; We use that instead of package. Note that
;; early-init.el should be force disabling package as well.
(defvar bootstrap-version)
(let ((bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
        "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
        'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq package-enable-at-startup nil)
#+end_src

* Personal Functions Required During Initialization

Here we have a few functions that are referenced later in the config.

#+begin_src emacs-lisp
  ;; Any functions we need to use during init.
  (defun bdw-frame-creation-hook (&optional frame)
    "Do frame-type-conditional setup."
    (with-selected-frame frame
      (if (display-graphic-p)
          (progn
            (custom-set-faces
             ;; custom-set-faces was added by Custom.
             ;; If you edit it by hand, you could mess it up, so be careful.
             ;; Your init file should contain only one such instance.
             ;; If there is more than one, they won't work right.
             '(default ((t (:family "DejaVu Sans Mono" :foundry "PfEd" :slant normal :weight normal :height 218 :width normal)))))
            (scroll-bar-mode -1)
            (tool-bar-mode -1)))))
#+end_src

* Basic Configuration and UI Config

These settings tweak the UI in ways we find more useful. Things like
toolbars and scrollbars aren't useful for us as we like keyboard
driven operation and often run in a terminal anyway. We also turn on a
few deprecated features.

#+begin_src emacs-lisp
;; Our basic config overrides and default settings
(add-hook 'after-make-frame-functions 'bdw-frame-creation-hook)
(setq inhibit-startup-message t)
(menu-bar-mode -1)
(column-number-mode t)         ;; show column numbers
(fset 'yes-or-no-p 'y-or-n-p)
(global-font-lock-mode t)      ;; always have font colouring
;; enable a few deprecated features that we like
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(setq default-tab-width 2)
(setq make-backup-files nil)   ;; stop the little ~ turd files
#+end_src

#+begin_src emacs-lisp
  ;; Dump anything managed via custom-set* in a separate file
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

* General Keybindings

Here, we capture keybindings that aren't specific to any modes.

#+begin_src emacs-lisp
;; General keybindings here
(global-set-key (kbd "C-x k") 'kill-this-buffer)
(global-set-key (kbd "C-c C-c") 'comment-or-uncomment-region)
;; macros with 1 key
(global-set-key [f4]  'start-kbd-macro)
(global-set-key [f5]  'end-kbd-macro)
(global-set-key [f6]  'call-last-kbd-macro)
#+end_src

* Package Installation and Configuration

We install, configure and use several packages that make emacs more
useful for my needs. We start by finalizing straight.el.

** Straight Package Manager Setup

The straight.el package needs a bit of additional setup to work
nicely. We bring in use-package and then have straight use use-package
to override use-package with a more featureful version.

#+begin_src emacs-lisp
  ;; Everything else we want to do via use-package, but to ensure that
  ;; boostraps, use straight directly for it.
  (straight-use-package 'use-package)

  ;; Now, teach straight to integrate itself cleanly into use-package by
  ;; default.
  (use-package straight
    :custom
    (straight-use-package-by-default t))
#+end_src

** General UI and Creature Comfort Packages

These packages provide enhancements to the default UI in ways that
make it more useful.

*** Dashboard
#+begin_src emacs-lisp
  ;; General UI and creature-comfort improvements
  (use-package dashboard
    :straight
    (dashboard :type git :host github :repo "emacs-dashboard/emacs-dashboard" )
    :config
    (dashboard-setup-startup-hook)
    :custom
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-items '((recents . 5)
                       (projects . 5))))
#+end_src

*** Diminish
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** ElDoc

#+begin_src emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode)
#+end_src

*** Autorevert

Always revert buffers when the underlying file has changed.

#+begin_src emacs-lisp
  (use-package autorevert
    :diminish auto-revert-mode
    :config
    (global-auto-revert-mode t))
#+end_src

*** Highlight Line

#+begin_src emacs-lisp
  (use-package hl-line
    :config
    (global-hl-line-mode t)) ;; turn it on for all modes by default
#+end_src

*** Doom Themes

We don't need all of Doom Emacs, but do like the nice set of themes.

#+begin_src emacs-lisp
  (use-package doom-themes
    :custom
    (doom-themes-enable-bold t)    ;; if nil, bold is universally disabled
    (doom-themes-enable-italic t) ;; if nil, italics is universally disabled
    :config
    (load-theme 'doom-zenburn t)
    (doom-themes-visual-bell-config))  ;; Enable flashing mode-line on errors
#+end_src

*** Helpful

  This package provides, as it says on the tin, helpful functions
  for doing things like prompting with available next-key when
  you're part way through a sequence, etc.

#+begin_src emacs-lisp
  
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

*** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+end_src

*** Term Title

I often use emacs from a terminal, so this ensures the terminal
displays a proper title.

#+begin_src emacs-lisp
  (use-package term-title
    :straight
    (term-title :type git :host github :repo "CyberShadow/term-title" )
    :config
    (term-title-mode))
#+end_src

*** Goto Line Faster

#+begin_src emacs-lisp
  (use-package goto-line-faster
    :straight
    (goto-line-faster :type git :host github :repo "davep/goto-line-faster.el" ))
#+end_src

*** Counsel

#+begin_src emacs-lisp
  (use-package counsel
    :init
    ;; make easier alt-x (when ctrl is bound to caps lock)
    (global-set-key "\C-x\C-m" 'counsel-M-x)
    (global-set-key "\C-c\C-m" 'counsel-M-x)
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src

*** Counsel Projectile
This provides some projectile-specific ui enhancements for minibuffer
actions.

#+begin_src emacs-lisp
  ;; Enable a few more ivy integrations for projectile.
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

*** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :diminish ;; hide this minor mode in the modeline
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume))
    :config
    (ivy-mode 1)
    :custom
    (ivy-use-virtual-buffers t))
#+end_src

*** Ivy Rich

#+begin_src emacs-lisp
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src

*** Ivy Prescient

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;; (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

*** Project
Eglot requires some of the foundations from project but doesn't pull
it in nicely via straight. Ensure it's available so eglot finds what
it needs.

#+begin_src emacs-lisp
  (use-package project)
#+end_src

*** Projectile

This mode provides many nice things for working on repositories as
units of files.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode +1)
    :custom
    (projectile-completion-system 'ivy)
    (projectile-project-search-path
     '(("~/working_code/" . 1)
       ("~/working_code/go/src/github.com/bdwalton") . 1)))
#+end_src

*** Midnight Mode

Auto-clean old buffers overnight.

#+begin_src emacs-lisp
  (use-package midnight ; enable midnight mode buffer purging
    :config
    (midnight-delay-set 'midnight-delay "4:30am"))
#+end_src

*** Editorconfig

This enables consuming certain standardized config files from project
repositories, which makes things like enforcing some coding standards
easier.

#+begin_src emacs-lisp
  (use-package editorconfig
    :diminish
    :config
    (editorconfig-mode 1))
#+end_src

** Programming Related Packages And Config

The packages below make programming nicer by enhancing the experience
with things like bracket matching and colouring, git integration, auto
indentation etc.

*** Magit

#+begin_src emacs-lisp
  ;; Programming related packages and config
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

*** Apheleia

#+begin_src emacs-lisp
  (use-package apheleia
    :diminish
    :config
    (apheleia-global-mode +1))
#+end_src

*** Smartparens

#+begin_src emacs-lisp
  (use-package smartparens
    :diminish
    :init
    (require 'smartparens-config)
    :hook
    (prog-mode . smartparens-mode)
    :config
    (show-smartparens-global-mode t)
    :custom
    (smartparens-strict-mode t))
#+end_src

*** Rainbow Delimiters


#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Tree Sitter

#+begin_src emacs-lisp
  (use-package tree-sitter)
#+end_src

*** Tree Sitter Languages

#+begin_src emacs-lisp
  ;; Various modes that we find useful

  (use-package tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

*** Company Mode
This enables some rich programming completion UIs

#+begin_src emacs-lisp
  ;; Some text completion UIs that make programming experiences richer.
  (use-package company
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :init
    (add-hook 'go-mode-hook #'company-mode))
#+end_src

*** Yasnippet

Use the yasnippet library to provide snippet completion for
eglot. Must be loaded before eglot.

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+end_src
*** Eglot

Setup eglot for nice LSP integration in various coding modes.

#+begin_src emacs-lisp
  (use-package eglot
    :after yasnippet
    :config
    (add-hook 'go-mode-hook #'eglot-ensure))
#+end_src

** Useful Modes For Coding and Editing Configs

Make sure we have programming and config modes for commonly used
languages and files.

*** Go Mode

#+begin_src emacs-lisp
  (use-package go-mode)
#+end_src

*** Rust Mode

#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

*** i3 Config Mode

#+begin_src emacs-lisp
  (use-package i3wm-config-mode)
#+end_src

*** Ini File Mode

#+begin_src emacs-lisp
  (use-package ini-mode
    :straight
    (ini-mode type: git :host github :repo "Lindydancer/ini-mode" )
    :config
    (ini-mode))
#+end_src

*** Markdown File Mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md" . gfm-mode))   ;; gfm == GitHub Flavored Markdown
#+end_src
  
*** Systemd Unit Config Mode

#+begin_src emacs-lisp
  (use-package systemd
    :config
    (systemd-mode))
#+end_src

** Org Mode Config

We use org mode with several enhancements. All of the org-related
config is below.

*** Org Mode
#+begin_src emacs-lisp
  ;; All of our org-mode related config
  (use-package org
    :config
    (require 'org-tempo) ;; Needed after org 9.2
    (add-hook 'org-tab-first-hook 'org-end-of-line)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)))
    :custom
    (org-ellipsis " ▾")
    (org-hide-emphasis-markers t)
    (org-log-done 'time)
    (org-agenda-start-with-log-mode t)
    (org-startup-indented t))
#+end_src

*** Org Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

*** Org Auto Tangle

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :diminish
    :after org
    :straight
    (org-auto-tangle type: git :host github :repo "yilkalargaw/org-auto-tangle" )
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

* Custom Set Variables and Faces
We store this in a separate file. It will be version controlled for
completeness, but because we don't curate this by hand, we keep it out
of the main init.el.

#+begin_src emacs-lisp :tangle ./custom.el
  
  ;; These are both manipulated automatically. Don't hand curate them.
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_src

* Optional Site/Machine Specific Config
#+begin_src emacs-lisp
  ;; Now pull in the optional site-local config
  (setq site-local-lib
        (concat
         (file-name-directory #$)
         (concat "emacs-" (getenv "BDW_CONFIG_TYPE") ".el")))
  (when (file-readable-p site-local-lib)
    (load-library site-local-lib))
#+end_src

* Final Setup Actions
#+begin_src emacs-lisp
  ;; finally, always start with ~/ as the current directory
  (cd (getenv "HOME"))
#+end_src

* Org Metadata

This isn't output to the config, but captures metadata that is used by
org mode to control various properties.

#+auto_tangle: t
#+property: header-args:emacs-lisp :tangle ./init.el
#+startup: show3levels
